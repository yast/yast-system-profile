/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	modules/SystemProfile.ycp
 * Package:	Configuration of system-profile
 * Summary:	SystemProfile settings, input and output functions
 * Authors:	J. Daniel Schmidt <jdsn@suse.de>
 *
 * $Id: SystemProfile.ycp 41350 2007-10-10 16:59:00Z dfiser $
 *
 * Representation of the configuration of system-profile.
 * Input and output routines.
 */

{

module "SystemProfile";
textdomain "system-profile";

import "Progress";
import "Report";
import "Summary";
import "Message";



global boolean smoltMonthlyEnabled = false;
global boolean systemProfileFirstTime = false;
/**
 * Module title to use - will be selected and set in the client
 */
global string moduleTitle = "";

string smoltLockfile = "/var/lock/subsys/smolt";
string firstTimeFlagFile = "/var/lib/YaST2/systemProfileDidRun";

/**
 * Data was modified?
 */
boolean modified = false;



/**
 * Execute the smolt command to read or submit data
 */
global string executeSmoltCmd(symbol mode)
{
    map result = $[];
    string smoltCmd = "/usr/bin/smoltSendProfile";

    if (mode == `print)
    {
        // beautify the output a little by removing useless tab characters
        smoltCmd = smoltCmd + "  -p | sed -e 's/^[\t ]*//'  ";
    }
    else if (mode == `auto)
    {
        // send without interaction
        smoltCmd = smoltCmd + "  -a | sed -e 's/^[\t ]*//' ";
    }
    else
    {
        y2error("Error: unkown command mode for smoltSendProfile");
        return nil;
    }

    result = (map)SCR::Execute(.target.bash_output, smoltCmd);
    if (result["exit"]:1 == 0)
    {
        y2milestone("smoltSendProfile created the following output:\n%1", result["stdout"]:"" );
        return (string) result["stdout"]:nil;
    }
    else
    {
        y2milestone("smoltSendProfile exited with an error, stderr output is:\n%1", result["stderr"]:"" );
        return nil;
    }

    // make sure there is a return
    return "";
}


/**
 * Read all system-profile settings
 * @return true on success
 */
global boolean Read()
{
    smoltMonthlyEnabled    = ( (integer)SCR::Read(.target.size, smoltLockfile) >= 0 );
    systemProfileFirstTime = ( (integer)SCR::Read(.target.size, firstTimeFlagFile) < 0 );
    if (systemProfileFirstTime)  smoltMonthlyEnabled = true;

    y2milestone("The smolt monthly cronjob activation status: %1", smoltMonthlyEnabled);

    return true;
}

/**
 * Write all system-profile settings
 * @return true on success
 */
global boolean Write()
{
    string exec="/bin/true";
    SCR::Execute(.target.bash, sformat("touch %1", firstTimeFlagFile));
    if (smoltMonthlyEnabled)
    {
        exec = sformat("touch %1", smoltLockfile);
        y2milestone("Enabling smolt monthly cronjob with: %1", exec);
    }
    else
    {
        exec = sformat("rm -f  %1", smoltLockfile);
        y2milestone("Disabling smolt monthly cronjob with: %1", exec);
    }

    SCR::Execute(.target.bash, exec);
    return true;
}

/**
 * Get all system-profile settings from the first parameter
 * (For use by autoinstallation.)
 * @param settings The YCP structure to be imported.
 * @return boolean True on success
 */
global boolean Import (map settings) {

    smoltMonthlyEnabled = (boolean) settings["enable_smolt_monthly"]:false;

    return true;
}

/**
 * Dump the system-profile settings to a single map
 * (For use by autoinstallation.)
 * @return map Dumped settings (later acceptable by Import ())
 */
global map Export ()
{
    return $[ "enable_smolt_monthly":smoltLockfile ];
}


/**
 * Return packages needed to be installed and removed during
 * Autoinstallation to insure module has all needed software
 * installed.
 * @return map with 2 lists.
 */
global map AutoPackages()
{
    return $[ "install":["smolt"], "remove":[] ];
}


/**
 * Data was modified?
 * @return true if modified
 */
global boolean Modified() {
    y2debug("modified=%1",modified);
    return modified;
}

/**
 * Mark as modified, for Autoyast.
 */
global void SetModified(boolean value) {
      modified = true;
  }

/* EOF */
}
